""" Problem Description
You have given a string A having Uppercase English letters.

You have to find how many times subsequence "AG" is there in the given string.

NOTE: Return the answer modulo 109 + 7 as the answer can be very large.



Problem Constraints
1 <= length(A) <= 105



Input Format
First and only argument is a string A.



Output Format
Return an integer denoting the answer.



Example Input
Input 1:

 A = "ABCGAG"
Input 2:

 A = "GAB"


Example Output
Output 1:

 3
Output 2:

 0


Example Explanation
Explanation 1:

 Subsequence "AG" is 3 times in given string 
Explanation 2:

 There is no subsequence "AG" in the given string.

"""

Solution:

class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
        cnt = 0
        gcnt = 0
        n = len(A)
        for i in reversed(range(n)):
            if A[i] == 'G':
                gcnt += 1
            if A[i] == 'A':
                cnt += gcnt
        return cnt
        
  Another Approach:
  class Solution:
    # @param A : string
    # @return an integer
    def solve(self, A):
        n = len(A)
        mod = 1000*1000*1000 + 7
        
        # create an array to store number of G's from i to n
        count_G = [0]*n
        
        # initialize the array with 0
        for i in range(0, n):
            count_G[i] = 0
        
        # set the value of count_G[n - 1] equal to 1 if last character is G
        count_G[n - 1] = (A[n - 1] == 'G')
        # traverse the string from backward and count number of G's from i to n
        for i in range(n - 2, 0, -1):
            count_G[i] = count_G[i + 1] + (A[i] == 'G')
        
        ans = 0
        # traverse the string again from beginning
        for i in range(0, n - 1):
            # if current character is "A" then add number of G's after that 
            if(A[i] == 'A'):
                ans = (ans + count_G[i + 1]) % mod
        
        # return the answer
        return ans


