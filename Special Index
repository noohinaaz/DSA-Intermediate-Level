"""Problem Description
Given an array, arr[] of size N, the task is to find the count of array indices such that removing an element from these indices makes the sum of even-indexed and odd-indexed array elements equal.



Problem Constraints
1 <= n <= 105
-105 <= A[i] <= 105


Input Format
First argument contains an array A of integers of size N


Output Format
Return the count of array indices such that removing an element from these indices makes the sum of even-indexed and odd-indexed array elements equal.



Example Input
Input 1:
A=[2, 1, 6, 4]
Input 2:

A=[1, 1, 1]


Example Output
Output 1:
1
Output 2:

3


Example Explanation
Explanation 1:
Removing arr[1] from the array modifies arr[] to { 2, 6, 4 } such that, arr[0] + arr[2] = arr[1]. 
Therefore, the required output is 1. 
Explanation 2:

Removing arr[0] from the given array modifies arr[] to { 1, 1 } such that arr[0] = arr[1] 
Removing arr[1] from the given array modifies arr[] to { 1, 1 } such that arr[0] = arr[1] 
Removing arr[2] from the given array modifies arr[] to { 1, 1 } such that arr[0] = arr[1] 
Therefore, the required output is 3. """

Solution:

class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        n = len(A)
        a = [[0] * (n + 1), [0] * (n + 1)]
        for i, x in enumerate(A):
            a[0][i + 1] = a[0][i]
            a[1][i + 1] = a[1][i]
            a[i % 2][i + 1] += x

        c = 0
        s = sum(A)
        for i in range(n):
            e = a[0][i] - a[0][0] + a[1][n] - a[1][i + 1]
            if e * 2 == s - A[i]:
                c += 1
        return c
        
  Another Approach:
  
  class Solution:
    # @param A : list of integers
    # @return an integer
    def solve(self, A):
        n=len(A);
        if n==1:
            return 1
        if n==2:
            return 0
        sumEven = 0
        sumOdd = 0
        for i in range(n) :
            if (i % 2 == 0) :
                sumEven += A[i];
 
            else :
                sumOdd += A[i];
        currOdd = 0
        currEven = A[0]
        res = 0
        newEvenSum = 0
        newOddSum = 0
        for i in range(1,n-1):
            if i%2 :
                currOdd += A[i]
                newEvenSum = currEven + sumOdd- currOdd
                newOddSum = currOdd + sumEven - currEven - A[i]
            else :
                currEven += A[i]
                newOddSum = currOdd + sumEven  - currEven
                newEvenSum = currEven + sumOdd - currOdd -A[i]
            if (newEvenSum == newOddSum) :
                res+=1
        if (sumOdd == sumEven - A[0]) :
            res+=1
        if (n % 2 == 1) :
            if (sumOdd == sumEven - A[n - 1]) :
                res+=1
        else :
            if (sumEven == sumOdd - A[n - 1]) :
                res+=1
        return res
        
            
